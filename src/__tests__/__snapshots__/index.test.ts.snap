// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`index.ts exports snapshot test 1`] = `
{
  "APP": {
    "API1_TIMEOUT": 15000,
    "APP_UNMOUNT": "ðŸ˜¬ app closed!!",
    "BACK_CLICK": {
      "ERROR": "error while navigating back",
      "SUCCESS": "Back button clicked!!!",
    },
    "DEPRECATION_MSG_FOR_REMOVAL": "will be deprecated in the next patch release. Please use your own hook for the same.",
    "ENVS": {
      "BETA": "beta",
      "DEV": "development",
      "PROD": "production",
      "STG": "staging",
    },
    "THEME": {
      "DARK": "dark",
      "LIGHT": "light",
    },
  },
  "Button": [Function],
  "ComponentWithSuspense": [Function],
  "HtmlContent": [Function],
  "Loader": [Function],
  "REDUX": {
    "SLICE_NAMES": {
      "APIS": "apis",
      "APP": "app",
      "NAVIGATION": "navigation",
    },
  },
  "ReduxProvider": [Function],
  "SW": {
    "LOGS": {
      "CHECKING_SW": "Checking for service worker...",
      "NO_INTERNET": "No internet connection found. App is running in offline mode.",
      "NO_SW": "No service worker found. Probably a different app.",
      "REGISTRATION_ERROR": "Error during service worker registration ->",
      "SUCCESS": "Service Worker registered successfully",
      "SW_FOUND": "Service worker found. Proceeding as normal.",
      "SW_READY": "This web-app is being served cache-first by a service.",
    },
    "SW_URL": "/sw.js",
  },
  "SWRegistration": {
    "register": [Function],
    "unregister": [Function],
  },
  "addRequestInterceptor": [Function],
  "addResponseInterceptor": [Function],
  "beforeUnload": {
    "callBackFn": [Function],
    "subscribe": [Function],
    "unSubscribe": [Function],
  },
  "capitalizeFirstChar": [Function],
  "classNames": [Function],
  "convertGainFormat": [Function],
  "convertToArrayOfPairs": [Function],
  "copyToClipboard": [Function],
  "debugLog": [Function],
  "deduplicate": [Function],
  "deleteCookie": [Function],
  "downloadFileFromData": [Function],
  "errorLog": [Function],
  "formatSecToYodaTime": [Function],
  "gcd": [Function],
  "generateRandomString": [Function],
  "generateUniqSerial": [Function],
  "getAspectRatio": [Function],
  "getCookie": [Function],
  "getDeprecationMsgForRemoval": [Function],
  "getEncodedURI": [Function],
  "getInitials": [Function],
  "getMaskedValue": [Function],
  "getQueryParam": [Function],
  "handleRequest": [Function],
  "infoLog": [Function],
  "isBrowser": [Function],
  "isDesktop": [Function],
  "isEqualsIgnoringCase": [Function],
  "isLocalhost": [Function],
  "isMobile": {
    "android": [Function],
    "any": [Function],
    "iOS": [Function],
  },
  "isMobileBrowser": [Function],
  "isNonInteger": [Function],
  "load": {
    "callBackFn": [Function],
    "subscribe": [Function],
    "unSubscribe": [Function],
  },
  "log": [Function],
  "maskCharsExceptLastN": [Function],
  "preferredColorScheme": {
    "callBackFn": [Function],
    "subscribe": [Function],
    "unSubscribe": [Function],
  },
  "processQueryParams": [Function],
  "queries": {
    "baseQueryFn": [Function],
  },
  "renameKeys": [Function],
  "reportWebVitals": [Function],
  "rgbToHex": [Function],
  "rgbaToHex": [Function],
  "scrollToTop": [Function],
  "setCookie": [Function],
  "slices": {
    "addNewApiData": [Function],
    "addToApiHeadersByHost": [Function],
    "addToApiHeadersByIndex": [Function],
    "apisSlice": {
      "actions": {
        "addNewApiData": [Function],
        "addToApiHeadersByHost": [Function],
        "addToApiHeadersByIndex": [Function],
        "updateApiAxiosInstanceByHost": [Function],
        "updateApiAxiosInstanceByIndex": [Function],
        "updateApiHeadersByHost": [Function],
        "updateApiHeadersByIndex": [Function],
        "updateApiHostByIndex": [Function],
        "updateApiHostByValue": [Function],
      },
      "caseReducers": {
        "addNewApiData": [Function],
        "addToApiHeadersByHost": [Function],
        "addToApiHeadersByIndex": [Function],
        "updateApiAxiosInstanceByHost": [Function],
        "updateApiAxiosInstanceByIndex": [Function],
        "updateApiHeadersByHost": [Function],
        "updateApiHeadersByIndex": [Function],
        "updateApiHostByIndex": [Function],
        "updateApiHostByValue": [Function],
      },
      "getInitialState": [Function],
      "getSelectors": [Function],
      "injectInto": [Function],
      "name": "apis",
      "reducer": [Function],
      "reducerPath": "apis",
      "selectSlice": [Function],
      "selectors": {},
    },
    "appSlice": {
      "actions": {
        "setDarkTheme": [Function],
        "setLightTheme": [Function],
        "updateStore": [Function],
      },
      "caseReducers": {
        "setDarkTheme": [Function],
        "setLightTheme": [Function],
        "updateStore": [Function],
      },
      "getInitialState": [Function],
      "getSelectors": [Function],
      "injectInto": [Function],
      "name": "app",
      "reducer": [Function],
      "reducerPath": "app",
      "selectSlice": [Function],
      "selectors": {},
    },
    "clearStack": [Function],
    "navigationSlice": {
      "actions": {
        "clearStack": [Function],
        "popStack": [Function],
        "pushStack": [Function],
      },
      "caseReducers": {
        "clearStack": [Function],
        "popStack": [Function],
        "pushStack": [Function],
      },
      "getInitialState": [Function],
      "getSelectors": [Function],
      "injectInto": [Function],
      "name": "navigation",
      "reducer": [Function],
      "reducerPath": "navigation",
      "selectSlice": [Function],
      "selectors": {},
    },
    "popStack": [Function],
    "pushStack": [Function],
    "setDarkTheme": [Function],
    "setLightTheme": [Function],
    "updateApiAxiosInstanceByHost": [Function],
    "updateApiAxiosInstanceByIndex": [Function],
    "updateApiHeadersByHost": [Function],
    "updateApiHeadersByIndex": [Function],
    "updateApiHostByIndex": [Function],
    "updateApiHostByValue": [Function],
    "updateStore": [Function],
  },
  "tableLog": [Function],
  "timeEndLog": [Function],
  "timeLog": [Function],
  "traceLog": [Function],
  "triggerCallback": [Function],
  "useApiRequest": [Function],
  "useBackPress": [Function],
  "useDebounce": [Function],
  "useTheme": [Function],
  "useThrottle": [Function],
  "warnLog": [Function],
}
`;
